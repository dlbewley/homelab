#!/bin/bash
# Download oc clients from mirror

# VERSIONS="4.7 latest nightly"
VERSIONS="4.14"
#CLIENT_VERSIONS="4.4 4.5"
#INSTALLER_VERSIONS="4.4 4.5"
HELM_VERSIONS="latest"
ROXCTL_VERSION="latest"
INSTALL_DIR="$HOME/bin"
OC_BASE_URL=https://mirror.openshift.com/pub/openshift-v4/x86_64/clients
OC_NIGHTLY_URL=https://mirror.openshift.com/pub/openshift-v4/clients
ROXCTL_BASE_URL=https://mirror.openshift.com/pub/rhacs/assets
BUTANE=https://mirror.openshift.com/pub/openshift-v4/clients/butane
ROSA=https://mirror.openshift.com/pub/openshift-v4/clients/rosa/latest/rosa-macosx.tar.gz
NMSTATE=https://github.com/nmstate/nmstate/releases/download

if [ $(uname) == "Darwin" ]; then
    PLATFORMS="macosx"
else
    PLATFORMS="linux"
fi

function download_butane() {
    version=$1
    platform=$2
    binary="butane"

    if [ "$platform" == "macosx" ]; then
        binary="butane-darwin-amd64"
    fi

    url="$BUTANE/$version/$binary"
    echo "Downloading butane for ${version}/${platform} $url"
    curl -s -o butane $url
    chmod 755 butane

}

function download_helm() {
    version=$1
    platform=$2

    mkdir -p "helm-${version}/${platform}"
    pushd "helm-${version}/${platform}" > /dev/null
    plat=$(echo $platform | sed s/macosx/darwin/) # Darwin platform name is inconsistent on mirror
    url=${OC_BASE_URL}/helm/${version}/helm-${plat}-amd64
    echo "Downloading helm for ${version}/${platform} $url"
    curl -s -O $url
    chmod 755 helm-${plat}-amd64
    ln -s helm-${plat}-amd64 helm 2>/dev/null
    popd > /dev/null
}

function download_skupper() {
    version=$1
    platform=$2
    plat=$(echo $platform | sed s/macosx/mac/)

    if [ "$version" == "latest" ]; then
        ver=$(curl -s https://api.github.com/repos/skupperproject/skupper/releases/latest  | grep '"tag_name"' | sed -E 's/.*"([^"]+)".*/\1/')
    fi

    url="https://github.com/skupperproject/skupper/releases/download/${ver}/skupper-cli-${ver}-${plat}-amd64.tgz"
    echo "Downloading skupper CLI for ${version}/${platform} $url"
    curl -s -L "$url" | tar xzf - -C ${HOME}/bin skupper
}

function download_policy_generator() {
    version=$1
    platform=$2
    plat=$(echo $platform | sed s/macosx/darwin/)

    if [ "$version" == "latest" ]; then
        ver=$(curl -s https://api.github.com/repos/stolostron/policy-generator-plugin/releases/latest  | grep '"tag_name"' | sed -E 's/.*"([^"]+)".*/\1/')
    fi

    url="https://github.com/stolostron/policy-generator-plugin/releases/download/${ver}/${plat}-amd64-PolicyGenerator"
    echo "Downloading PolicyGeneartor Kustomize plugin for ${version}/${platform} $url"
    mkdir -p "${HOME}/.config/kustomize/plugin/policy.open-cluster-management.io/v1/policygenerator"
    pushd "${HOME}/.config/kustomize/plugin/policy.open-cluster-management.io/v1/policygenerator" > /dev/null
    curl -s -o PolicyGenerator -L "$url"
    chmod 755 PolicyGenerator
    popd > /dev/null
}

function download_roxctl() {
    version=$1
    platform=$2
    if [ "$platform" != "macosx" ]; then
        return
    fi

    mkdir -p "roxctl-${version}/${platform}"
    pushd "roxctl-${version}/${platform}" > /dev/null
    plat=$(echo $platform | sed s/macosx/darwin/)
    url=${ROXCTL_BASE_URL}/${version}/bin/${plat}/roxctl
    echo "Downloading roxctl for ${version}/${platform} $url"
    curl -s -o roxctl -L "$url"
    chmod 755 roxctl
    popd > /dev/null
}

function download_nmstate() {
    version=$1
    platform=$2
    archive="nmstatectl-macos-x64.zip"
    binary="nmstatectl"

    url="$NMSTATE/$version/$archive"
    echo "Downloading nmstatectl for ${version}/${platform} $url"
    curl -s -o "$archive" -L "$url"
    unzip $archive
    chmod 755 $binary
    rm $archive
}

function download_noobaa() {
    # brew install noobaa/noobaa/noobaa # gave me a 404
    version=$1
    platform=$2
    if [ "$platform" != "macosx" ]; then
        return
    fi

    mkdir -p "noobaa-${version}/${platform}"
    pushd "noobaa-${version}/${platform}" > /dev/null
    plat=$(echo $platform | sed s/macosx/mac/)
    url=$(curl -s https://api.github.com/repos/noobaa/noobaa-operator/releases/$version \
            | jq -r ".assets[] | select(.browser_download_url | contains(\"$plat\"))| .browser_download_url")
    echo "Downloading noobaa for ${version}/${platform} $url"
    curl -s -o noobaa -L "$url"
    chmod 755 noobaa
    popd > /dev/null
}

function download_client() {
    version=$1
    platform=$2

    plat=$(echo $platform | sed s/osx//)
    # Darwin platform name is inconsistently applied on mirror
    if [ "$version" == "nightly" ]; then
        url=${OC_NIGHTLY_URL}/latest/openshift-client-${plat}.tar.gz
        echo "Downloading oc for ${version}/${platform} $url"
        curl -s -o oc.tar.gz $url
    else
        url=${OC_BASE_URL}/ocp/stable-${version}/openshift-client-${plat}.tar.gz
        echo "Downloading oc for ${version}/${platform} $url"
        curl -s -o oc.tar.gz -O $url

        url=${OC_BASE_URL}/ocp/stable-${version}/opm-${plat}.tar.gz
        echo "Downloading opm for ${version}/${platform} $url"
        curl -s -o opm.tar.gz $url
    fi
}

function download_mustgather_client() {
    version=$1
    platform=$2
    plat=$(echo $platform | sed s/macosx/Darwin/)

    version=$(curl -q --silent "https://api.github.com/repos/gmeghnag/omc/releases/latest" | grep '"tag_name"' | sed -E 's/.*"([^"]+)".*/\1/')
    url="https://github.com/gmeghnag/omc/releases/download/${version}/omc_${plat}_x86_64.tar.gz"
    echo "Downloading omc for ${version}/${platform} $url"
    curl -s -L "$url" | tar xzf - -C ${HOME}/bin omc
}

function download_installer() {
    version=$1
    platform=$2
    plat=$(echo $platform | sed s/osx//)

    if [ "$version" == "nightly" ]; then
        url=${OC_NIGHTLY_URL}/latest-${version}/openshift-install-${plat}.tar.gz;
        echo "Downloading installer for ${version}/${platform} $url"
        curl -s -o openshift-install.tar.gz $url
    else
        url=${OC_BASE_URL}/ocp/stable-${version}/openshift-install-${plat}.tar.gz;
        echo "Downloading installer for ${version}/${platform} $url"
        curl -s -o openshift-install.tar.gz $url
    fi
}

pushd $INSTALL_DIR > /dev/null
for version in $VERSIONS; do
    for platform in $PLATFORMS; do
        mkdir -p "oc-${version}/${platform}"
        pushd "oc-${version}/${platform}" > /dev/null

        download_client $version $platform
        tar xzf oc.tar.gz
        tar xzf opm.tar.gz
        ln -s $(echo $platform | sed s/macosx/darwin/)-amd64-opm opm 2>/dev/null

        download_installer $version $platform
        tar xzf openshift-install.tar.gz
        popd > /dev/null
    done
done
for version in $HELM_VERSIONS; do
    for platform in $PLATFORMS; do
        download_helm $version $platform
    done
done
for platform in $PLATFORMS; do
    download_butane latest $platform
    download_mustgather_client latest $platform
    download_nmstate "v2.2.10" $platform
    download_noobaa latest $platform
    download_policy_generator latest $platform
    download_roxctl latest $platform
    download_skupper latest $platform
done
popd > /dev/null

